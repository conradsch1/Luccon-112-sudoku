from cmu_graphics import *
import math

def onAppStart(app):
    app.rows = 9
    app.cols = 9
    app.boardLeft = 50
    app.boardTop = 50
    app.boardWidth = 300
    app.boardHeight = 300
    app.boxWidth = app.boardWidth/app.cols
    app.boxHeight = app.boardHeight/app.rows
    
    app.cellThickWidth = 2
    app.cellBorderWidth = 1
    
    app.board = [[None] * app.cols for row in range(app.rows)]
    app.selection = None
    app.number = None

def onMousePress(app, mouseX, mouseY):
    app.selection = None
    cell = getCell(app, mouseX, mouseY)
    if cell != None:
        row, col = cell
        app.number = cell
            
def onMouseMove(app, mouseX, mouseY):
    selectedCell = getCell(app, mouseX, mouseY)
    if selectedCell == None:
        app.selection = None
    else:
        row, col = selectedCell
        app.selection = selectedCell
    
def onKeyPress(app, key):
    if app.number != None:
        row, col = app.number
        if key.isdigit():
            app.board[row][col] = key
            
def redrawAll(app):
    drawBoard(app)
    drawBoardBorder(app)
    # drawLines(app)
    
def drawBoard(app):
    for row in range(app.rows):
        for col in range(app.cols):
            drawCell(app, row, col)
            if app.board[row][col] != None:
                drawLabel(app.board[row][col], 
                            app.boardLeft + (app.boxWidth*col)+app.boxWidth/2, 
                            app.boardTop + (app.boxHeight*row)+app.boxHeight/2)
            
def drawBoardBorder(app):
    drawRect(app.boardLeft, app.boardTop, app.boardWidth, app.boardHeight,
            fill = None, border = 'black', 
            borderWidth = 2 * app.cellBorderWidth)
            
            
def drawCell(app, row, col):
    cellLeft, cellTop = getCellLeftTop(app, row, col)
    cellWidth, cellHeight = getCellSize(app)
    color = 'cyan' if (row, col) == app.selection else None
        
    drawRect(cellLeft, cellTop, cellWidth, cellHeight,
            fill = color, border = 'black',
            borderWidth = app.cellBorderWidth)
            
# def drawLines(app):
#     for i in range(len(app.board)):
#         if (i+1) % 3 == 0:
#             drawLine(app.boardLeft, app.boardTop, app.boardWidth - app.boardLeft
#                         app.boardLeft + (i+1) * app.boxHeight, app.boardTop, 
#                     lineWidth = 2)
#     # for j in range(len(app.board[0])):
#     #     if (j+1) % 3 == 0:
#     #         drawLine(app.boardLeft, app.boardTop + j * app.boxHeight,
#     #                 lineWidth = 2)

def getCell(app, x, y):
    dx = x - app.boardLeft
    dy = y - app.boardTop
    cellWidth, cellHeight = getCellSize(app)
    row = math.floor(dy / cellHeight)
    col = math.floor(dx / cellWidth)
    if (0 <= row < app.rows) and (0 <= col < app.cols):
        return (row, col)
    else:
        return None
        
def getCellLeftTop(app, row, col):
    cellWidth, cellHeight = getCellSize(app)
    cellLeft = app.boardLeft + col * cellWidth
    cellTop = app.boardTop + row * cellHeight
    return (cellLeft, cellTop)
    
def getCellSize(app):
    
    
    cellWidth = app.boardWidth / app.cols
    cellHeight = app.boardHeight / app.rows
    return (cellWidth, cellHeight)
    
def main():
    runApp()
    
main()
